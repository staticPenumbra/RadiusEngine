<!DOCTYPE html>
<!--/*----------------------------------------------------------------------------------------------------------
::“Copyright 2013 Clayton Burnett” 
::This program is distributed under the terms of the GNU General Public License
------------------------------------------------------------------------------------------------------------*/-->
<html lang="en">

<head>
	<!-- Settings for Mobile Browsers / Disable Scaling Render at full size-->
    <meta charset="UTF-8" />
	<meta name="viewport" content="width=device-width, user-scalable=no, initial-scale=1, maximum-scale=1, user-scalable=0" />
	<meta name="apple-mobile-web-app-capable" content="yes" />
	<meta name="apple-mobile-web-app-status-bar-style" content="black-translucent" />
	
	
	
    <link rel="stylesheet" type="text/css" href="AITESTBED.css" />
    <title>AUDIO TEST BED</title>
    <script src="AIController.js" charset="utf-8"></script>
    <script src="Entity.js" charset="utf-8"></script>
    
    <script>
    window.onload = function(){
	this.AIController = new AIController();
	this.Entities = new Array();
	this.Entity1 = new Entity("player1", "none", 10, 10, "human", 0);
	this.Entity2 = new Entity("Elf", "attacker", 20, 20, "elf", 1);
	this.Entity3 = new Entity("Dwarf", "defender", 30, 30, "dwarf", 2);
	this.Entities.push(Entity1);
	this.Entities.push(Entity2);
	this.Entities.push(Entity3);
    //-----------Preloading Resources-----------------------------------------
    var FileRoot = location.href.substring(0,location.href.lastIndexOf("/")+1);
    //Bind Event Handlers and Inputs
    this.BindHandlers();
    setInterval(TestLoop, 1000/30);
    }
    //The Main Game Loop fuction
    function TestLoop(){
	alert("RUNNING TEST SUITE\n");
	
		//UpdateEntities
		alert("TESTING: UpdateEntities");
		this.AIController.UpdateEntities(this.Entities);
		if(this.AIController.Entities == this.Entities){
			alert("RESULT: PASS");
		}else{
			alert("RESULT: FAIL");
		}
		//SetCurrentEntity--GetCurrentEntity
		alert("TESTING: SetCurrentEntity & GetCurrentEntity");
		this.AIController.SetCurrentEntity(this.Entity1);
		if(this.AIController.GetCurrentEntity == this.Entity1){
			alert("GET/SET: PASS");
		}
		else{
			alert("GET/SET: FAIL");
		}
		//MoveToTarget
		alert("TESTING: MoveToTarget");
		this.AIController.MoveToTarget(this.Entity1, this.Entity2)
		alert("CHECK CONSOLE FOR ERROR");
		
		//DetectAvailableTarget
		alert("TESTING: DetectAvailableTarget");
		var inRange = this.AIController.DetectAvailableTarget(this.Entity1, this.Entity2);
		alert("Entity2 in range of Entity1?: " + inRange);

		//TargetNearestPlayer
		alert("TESTING: TargetNearestPlayer");
		var result = this.AIController.TargetNearestPlayer(this.Entity2);
		switch(result){
			case null:
				alert("player not in range");
			break;
			default:
				if(result == this.Entity1){
					alert("DETECTED: PASS");
				}else{
					alert("NOT DETECTED");
				}
				break;
		}
		
		//RunRoutine
		alert("TESTING: RunRoutine");
		AIController.RunRoutine(this.Entity1);
		AIController.RunRoutine(this.Entity2);
		AIController.RunRoutine(this.Entity3);
		alert("SUCCESS?");		
    }
    function BindHandlers(){
		//Keyboard
		window.addEventListener('keydown', kDown, false);
		window.addEventListener('keyup', kUp, false);  
		//Mouse
		GetFrontCanvas().addEventListener('mousemove', mMove, false);
		GetRearCanvas().addEventListener('mousemove', mMove, false);
		GetFrontCanvas().addEventListener('click', mClick, false);
		GetRearCanvas().addEventListener('click', mClick, false);
    }
	function mClick(e){
		//GameEngine.mouseClick(e);
	}
	function mMove(e){
		//GameEngine.mouseMove(e);
	}
    function kDown(e){
		//GameEngine.keyDown(e.keyCode);
    }
    function kUp(e){
		//GameEngine.keyUp(e.keyCode);
    }  
	function GetAudioDevice(){
		var a = document.getElementById('AudioController1');
		var b = document.getElementById('AudioController2');
		var c = document.getElementById('AudioController3');
		var d = document.getElementById('AudioController4');
		var e = document.getElementById('AudioController5');
		var f = document.getElementById('AudioController6');
		var ABC = new Array();
		ABC.push(a);
		ABC.push(b);
		ABC.push(c);
		ABC.push(d);
		ABC.push(e);
		ABC.push(f);
		return(ABC);
	}
	function GetFrontCanvas(){
		var c = document.getElementById('FrontScreen');
		return(c);
    }
    function GetFrontCanvasContext(){
		var ctx = GetFrontCanvas().getContext('2d');
		return(ctx);
    }    
    function GetRearCanvas(){
		var c = document.getElementById('RearScreen');
		return(c);
    }
    function GetRearCanvasContext(){
		var bctx = GetRearCanvas().getContext('2d');
		return(bctx);
    }    
    
    </script>
</head>
   
<body>
	<audio id ="AudioController1" loop="loop">
			Your browser does not support the audio element.
	</audio>
	<audio id ="AudioController2" loop="loop">
			Your browser does not support the audio element.
	</audio>
    <audio id ="AudioController3" loop="loop">
			Your browser does not support the audio element.
	</audio>
	<audio id ="AudioController4" loop="loop">
			Your browser does not support the audio element.
	</audio>
	<audio id ="AudioController5" loop="loop">
			Your browser does not support the audio element.
	</audio>
	<audio id ="AudioController6" loop="loop">
			Your browser does not support the audio element.
	</audio>
	<canvas id="FrontScreen" width="1400" height="600" style="visibility: hidden;">
			Your browser doesn't include support for the canvas tag.
    </canvas>
	<canvas id="RearScreen" width="1400" height="600">
			Your browser doesn't include support for the canvas tag.
    </canvas>
</body>

</html>
